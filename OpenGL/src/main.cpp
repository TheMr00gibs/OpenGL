#include <GL/glew.h>
#include <GLFW/glfw3.h>
#include <iostream>

int main(void)
{
    GLFWwindow* window;

    /* Initialize the library */
    if (!glfwInit())
        return -1;

    /* Create a windowed mode window and its OpenGL context */
    window = glfwCreateWindow(640, 480, "Hello World", NULL, NULL);
    if (!window)
    {
        glfwTerminate();
        return -1;
    }

    /* Make the window's context current */
    glfwMakeContextCurrent(window);

    if (glewInit() != GLEW_OK) {
        std::cout << "Error!" << std::endl;
    }
    std::cout << glGetString(GL_VERSION) << std::endl;


    float positions[6] = {
        -0.5f, -0.5f,
         0.0f,  0.5f,
         0.5f, -0.5f
    };

    unsigned int buffer;
    // Declare an unsigned variable to store the buffer ID (generated by OpenGL).

    glGenBuffers(1, &buffer);
    // Generate a buffer and store its unique ID in the `buffer` variable.
    // The first argument (`1`) specifies the number of buffers to generate.
    // OpenGL assigns a unique identifier for the buffer.

    glBindBuffer(GL_ARRAY_BUFFER, buffer);
    // Bind the generated buffer to the target `GL_ARRAY_BUFFER`.
    // This means that all subsequent buffer-related operations will affect this bound buffer.
    // `GL_ARRAY_BUFFER` is used to store data such as vertex positions, colors, etc.

    glBufferData(GL_ARRAY_BUFFER, 6 * sizeof(float), positions, GL_STATIC_DRAW);
    // Allocate memory for the bound buffer and copy the provided data (`positions`) into it.
    // - The first argument, `GL_ARRAY_BUFFER`, confirms the type of the bound buffer.
    // - The second argument, `6 * sizeof(float)`, specifies the size of the data in bytes (6 floats in this case).
    // - The third argument, `positions`, is a pointer to the data to be copied into the buffer.
    // - The last argument, `GL_STATIC_DRAW`, tells OpenGL that the data will mostly be used for drawing and won't change frequently.



    /* Loop until the user closes the window */
    while (!glfwWindowShouldClose(window))
    {
        /* Render here */
        glClear(GL_COLOR_BUFFER_BIT);

        glDrawArrays(GL_TRIANGLES, 0, 3); // Draw call
        
        /* Swap front and back buffers */
        glfwSwapBuffers(window);

        /* Poll for and process events */
        glfwPollEvents();
    }

    glfwTerminate();
    return 0;
}